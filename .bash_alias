#!/bin/bash
#   ---------------------------
#   Listing Files
#   ---------------------------
# enable color support of ls and also add handy aliases

#GNU coreutils
if ls --color -d . >/dev/null 2>&1; then

    # colored GCC warnings and errors
    #export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

    if [ -x /usr/bin/dircolors ]; then
        test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
        alias dir='dir --color=auto'
        alias vdir='vdir --color=auto'

        alias grep='grep --color=auto'
        alias fgrep='fgrep --color=auto'
        alias egrep='egrep --color=auto'    

        # inludues all file types. short list 
        alias ls='ls -1 --group-directories-first --color=auto'                                                            # list non hidden only
        alias lh='ls -1d --group-directories-first --color=auto .!(|.)'                                                    # list hidden only
        alias la='ls -1A --group-directories-first --color=auto'                                                           # list all
        
        # includes all files types. long list
        alias lls='ls -l --group-directories-first --color=auto'                                                           # list non hidden only
        alias llh='ls -ld --group-directories-first --color=auto .!(|.)'                                                   # list hidden only
        alias lla='ls -lA --group-directories-first --color=auto'                                                          # list all

        # includes both hidden and regular. short list
        lf()   { find . -maxdepth 1 ! -path . -type f -execdir sh -c 'v=${1##*/}; printf "$v\0"' - {} ';' \
                                                   | sort -zn | xargs -0 ls -1d --group-directories-first --color=auto ; } # list files only
        ld()   { find . -maxdepth 1 ! -path . -type d -execdir sh -c 'v=${1##*/}; printf "$v\0"' - {} ';' \
                                                   | sort -zn | xargs -0 ls -1d --group-directories-first --color=auto ; } # list directories only
        lsym() { find . -maxdepth 1 ! -path . -type l -execdir sh -c 'v=${1##*/}; printf "$v\0"' - {} ';' \
                                                   | sort -zn | xargs -0 ls -1d --group-directories-first --color=auto ; } # list symlink only
 
        # includes both hidden and regular. long list
        llf()   { find . -maxdepth 1 ! -path . -type f -execdir sh -c 'v=${1##*/}; printf "$v\0"' - {} ';' \
                                                   | sort -zn | xargs -0 ls -ld --group-directories-first --color=auto ; } # list files only
        lld()   { find . -maxdepth 1 ! -path . -type d -execdir sh -c 'v=${1##*/}; printf "$v\0"' - {} ';' \
                                                   | sort -zn | xargs -0 ls -ld --group-directories-first --color=auto ; } # list directories only
        llsym() { find . -maxdepth 1 ! -path . -type l -execdir sh -c 'v=${1##*/}; printf "$v\0"' - {} ';' \
                                                   | sort -zn | xargs -0 ls -ld --group-directories-first --color=auto ; } # list symlink only
    fi
    
#BSD 'ls'
elif ls -G -d . >/dev/null 2>&1; then

    export CLICOLOR=1
    export LSCOLORS=GxFxCxDxBxegedabagaced

        # inludues all file types. short list 
        alias ls='ls -1'                                                           # list non hidden only
        alias lh='find . -maxdepth 1 ! -path . -iname ".*" -execdir ls -1d {} +'   # list hidden only
        alias la='ls -A1'                                                          # list all

        # includes both hidden and regular. short list
        alias lf='find . -maxdepth 1 -type f -execdir ls -1Ad {} +'                # list files only
        alias ld='find . -maxdepth 1 ! -path . -type d -execdir ls -1Ad {} +'      # list directories only
        alias lsym='find . -maxdepth 1 -type l -execdir ls -1Ad {} +'              # list symlink only

        # includes all files types. long list
        alias lls='ls -l'                                                          # list non hidden only
        alias llh='find . -maxdepth 1 ! -path . -iname ".*" -execdir ls -ld {} +'  # list hidden only
        alias lla='ls -Al'                                                         # list all

        # includes both hidden and regular. long list
        alias llf='find . -maxdepth 1 -type f -execdir ls -lAd {} +'               # list files only
        alias lld='find . -maxdepth 1 ! -path . -type d -execdir ls -lAd {} +'     # list directories only
        alias llsym='find . -maxdepth 1 -type l -execdir ls -lAd {} +'             # list symlink only
        
fi

#   ---------------------------
#   Compression and Extraction
#   ---------------------------

#   compress a directory or file into an archive
#   ---------------------------------------------------------
#    usage: mkarchive -bz2 ~/Documents/filename => $(pwd)/filename.bz2
#    usage: mkarchive -zip ~/Documents          => $(pwd)/Documents.zip

    mkarchive() {
        if [ $# -ne 2 ] ; then
            echo "specifiy compression type and then directory to be compressed"
            return
        elif [ -d $2  ] || [ -f $2 ] ; then
            local TMPFILE=/tmp/$(basename $2)
            case "$1" in
                -tar.bz2)   tar jcvf $TMPFILE.tar.bz2 "$2"
                            mv $TMPFILE.tar.bz2 $(PWD)             ;;
                -tar.gz)    tar zcvf $TMPFILE.tar.gz "$2"
                            mv $TMPFILE.tar.gz $(PWD)              ;;
                -bz2)       if [ -f $2 ] ; then
                                bunzip2 -z $2
                                mv "$2".bz2 $(PWD)
                            else     
                                echo "works for list of files not directories"
                            fi                                     ;;
                -rar)       rar a $TMPFILE.rar "$2"
                            mv $TMPFILE.rar $(PWD)                 ;;
                -gz)        tar zcvf $TMPFILE.gz "$2"
                            mv $TMPFILE.gz $(PWD)                  ;;
                -tar)       tar cvf $TMPFILE.tar "$2"
                            mv $TMPFILE.tar $(PWD)                 ;;
                -tbz2)      tar jcvf $TMPFILE.tbz2 "$2"
                            mv $TMPFILE.tbz2 $(PWD)                ;;
                -tgz)       tar zcvf $TMPFILE.tgz "$2"
                            mv $TMPFILE.tgz $(PWD)                 ;;
                -zip)       zip -r $TMPFILE.zip "$2"
                            mv $TMPFILE.zip $(PWD)                 ;;
                -Z)         echo "file format not supported"       ;;
                -7z)        7z a $TMPFILE.7z "$2"
                            mv $TMPFILE.7z $(PWD)                  ;;
                *)      echo "'$1' is an unknown compression type" ;;
            esac
            if [ -f $TMPFILE.* ] ; then
                rm $TMPFILE.*
            fi
            unset TMPFILE
        else
            echo "invalid directory or file name"
        fi
    }

#   Extract most know archives with one command
#   ---------------------------------------------------------

    extract() {
        if [ -f $1 ] ; then
            case $1 in
                *.tar.bz2)   tar xjf $1     ;;
                *.tar.gz)    tar xzf $1     ;;
                *.bz2)       bunzip2 -d $1  ;;
                *.rar)       unrar e $1     ;;
                *.gz)        gunzip $1      ;;
                *.tar)       tar xf $1      ;;
                *.tbz2)      tar xjf $1     ;;
                *.tgz)       tar xzf $1     ;;
                *.zip)       unzip $1       ;;
                *.Z)         uncompress $1  ;;
                *.7z)        7z x $1        ;;
                *)     echo "'$1' cannot be extracted via extract()" ;;
            esac
        else
            echo "'$1' is not a valid file"
        fi
    }


#   ---------------------------
#   SEARCHING
#   ---------------------------

    ff()  { find . -name "$@" ; }     # ff:       Find file under the current directory
    ffs() { find . -name "$@"'*' ; }  # ffs:      Find file whose name starts with a given string
    ffe() { find . -name '*'"$@" ; }  # ffe:      Find file whose name ends with a given string

#   ---------------------------
#   PROCESS MANAGEMENT
#   ---------------------------

#   findPid: find out the pid of a specified process
#   -----------------------------------------------------
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user
#   -----------------------------------------------------
    findPid() { lsof -t -c "$@" ; }

#   memHogsTop, memHogsPs:  Find memory hogs
#   -----------------------------------------------------
    alias memHogsTop='top -l 1 -o rsize | head -20'
    alias memHogsPs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'

#   cpuHogs:  Find CPU hogs
#   -----------------------------------------------------
    alias cpu_hogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'

#   topForever:  Continual 'top' listing (every 10 seconds)
#   -----------------------------------------------------
    alias topForever='top -l 9999999 -s 10 -o cpu'

#   ttop:  Recommended 'top' invocation to minimize resources
#   ------------------------------------------------------------
#       Taken from this macosxhints article
#       http://www.macosxhints.com/article.php?story=20060816123853639
#   ------------------------------------------------------------
    alias ttop="top -R -F -s 10 -o rsize"

#   my_ps: List processes owned by my user:
#   ------------------------------------------------------------
    my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }

#   ---------------------------
#   NETWORKING
#   ---------------------------

#alias myip='curl ip.appspot.com'                    # myip:         Public facing IP Address
#alias netCons='lsof -i'                             # netCons:      Show all open TCP/IP sockets
#alias flushDNS='dscacheutil -flushcache'            # flushDNS:     Flush out the DNS Cache
#alias lsock='sudo /usr/sbin/lsof -i -P'             # lsock:        Display open sockets
#alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'   # lsockU:       Display only open UDP sockets
#alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'   # lsockT:       Display only open TCP sockets
#alias ipInfo0='ipconfig getpacket en0'              # ipInfo0:      Get info on connections for en0
#alias ipInfo1='ipconfig getpacket en1'              # ipInfo1:      Get info on connections for en1
#alias openPorts='sudo lsof -i | grep LISTEN'        # openPorts:    All listening connections
#alias showBlocked='sudo ipfw list'                  # showBlocked:  All ipfw rules inc/ blocked IPs

#   ii:  display useful host related informaton
#   -------------------------------------------------------------------
#    ii() {
#        echo -e "\nYou are logged on ${RED}$HOST"
#        echo -e "\nAdditionnal information:$NC " ; uname -a
#        echo -e "\n${RED}Users logged on:$NC " ; w -h
#        echo -e "\n${RED}Current date :$NC " ; date
#        echo -e "\n${RED}Machine stats :$NC " ; uptime
#        echo -e "\n${RED}Current network location :$NC " ; scselect
#        echo -e "\n${RED}Public facing IP Address :$NC " ;myip
#        #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
#        echo
#    }



# Add an "alert" alias for long running commands. Linux only
#  Usage:  sleep 10; alert

alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" \
  "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

